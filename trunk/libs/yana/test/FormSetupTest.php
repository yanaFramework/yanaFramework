<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../formsetup.php';

/**
 * Test class for FormSetup.
 * Generated by PHPUnit on 2011-04-13 at 15:53:47.
 */
class FormSetupTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var FormSetup
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new FormSetup;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @test
     */
    public function testSetPage()
    {
        $this->assertEquals(5, $this->object->setPage(5)->getPage());
    }

    /**
     * @test
     */
    public function testGetPage()
    {
        $this->assertEquals(0, $this->object->getPage());
    }

    /**
     * @test
     */
    public function testSetEntriesPerPage()
    {
        $this->assertEquals(1, $this->object->setEntriesPerPage(1)->getEntriesPerPage());
    }

    /**
     * @test
     * @expectedException \Yana\Core\Exceptions\InvalidArgumentException
     */
    public function testSetEntriesPerPageInvalidArgumentException()
    {
        $this->object->setEntriesPerPage(0);
    }

    /**
     * @test
     */
    public function testGetEntriesPerPage()
    {
        $this->assertEquals(5, $this->object->getEntriesPerPage());
    }

    /**
     * @test
     */
    public function testHasFilter()
    {
        $this->assertFalse($this->object->hasFilter());
        $this->object->setFilter('test', 'test');
        $this->assertTrue($this->object->hasFilter());
        $this->object->setFilter('test');
        $this->assertFalse($this->object->hasFilter());
    }

    /**
     * @test
     */
    public function testGetFilter()
    {
        $this->assertEquals('', $this->object->getFilter('test'));
    }

    /**
     * @test
     */
    public function testGetFilters()
    {
        $this->assertEquals(array(), $this->object->getFilters());
    }

    /**
     * @test
     */
    public function testSetFilter()
    {
        $this->assertEquals('Test_/%&lt;&gt;', $this->object->setFilter('column', 'Test?/*<>')->getFilter('column'));
    }

    /**
     * @test
     */
    public function testSetFilters()
    {
        $filters = array(
            'column1' => 'Test?/*',
            'column2' => 'Ã„<>'
        );
        $expected = array(
            'column1' => 'Test_/%',
            'column2' => 'Ã„&lt;&gt;'
        );
        $this->assertEquals($expected, $this->object->setFilters($filters)->getFilters());
    }

    /**
     * @test
     */
    public function testSetLayout()
    {
        $this->assertEquals(1, $this->object->setLayout(1)->getLayout());
    }

    /**
     * @test
     */
    public function testGetLayout()
    {
        $this->assertEquals(0, $this->object->getLayout());
    }

    /**
     * @test
     */
    public function testGetOrderByField()
    {
        $this->assertEquals('', $this->object->getOrderByField());
    }

    /**
     * @test
     */
    public function testSetOrderByField()
    {
        $this->assertEquals('Test', $this->object->setOrderByField('Test')->getOrderByField());
    }

    /**
     * @test
     */
    public function testSetSortOrder()
    {
        $this->assertFalse($this->object->setSortOrder(false)->isDescending());
        $this->assertTrue($this->object->setSortOrder(true)->isDescending());
    }

    /**
     * @test
     */
    public function testIsDescending()
    {
        $this->assertFalse($this->object->isDescending());
    }

    /**
     * @test
     */
    public function testSetSearchTerm()
    {
        $this->assertEquals('Test?/*<>', $this->object->setSearchTerm('Test?/*<>')->getSearchTerm());
    }

    /**
     * @test
     */
    public function testGetSearchTerm()
    {
        $this->assertEquals('', $this->object->getSearchTerm());
    }

    /**
     * @test
     */
    public function testSetDownloadAction()
    {
        $this->assertEquals('testFunction', $this->object->setDownloadAction('testFunction')->getDownloadAction());
    }

    /**
     * @test
     */
    public function testGetDownloadAction()
    {
        $this->assertEquals('', $this->object->getDownloadAction());
    }

    /**
     * @test
     */
    public function testSetSearchAction()
    {
        $this->assertEquals('testFunction', $this->object->setSearchAction('testFunction')->getSearchAction());
    }

    /**
     * @test
     */
    public function testGetSearchAction()
    {
        $this->assertEquals('', $this->object->getSearchAction());
    }

    /**
     * @test
     */
    public function testSetInsertAction()
    {
        $this->assertEquals('testFunction', $this->object->setInsertAction('testFunction')->getInsertAction());
    }

    /**
     * @test
     */
    public function testGetInsertAction()
    {
        $this->assertEquals('', $this->object->getInsertAction());
    }

    /**
     * @test
     */
    public function testSetUpdateAction()
    {
        $this->assertEquals('testFunction', $this->object->setUpdateAction('testFunction')->getUpdateAction());
    }

    /**
     * @test
     */
    public function testGetUpdateAction()
    {
        $this->assertEquals('', $this->object->getUpdateAction());
    }

    /**
     * @test
     */
    public function testSetDeleteAction()
    {
        $this->assertEquals('testFunction', $this->object->setDeleteAction('testFunction')->getDeleteAction());
    }

    /**
     * @test Implement testGetDeleteAction().
     */
    public function testGetDeleteAction()
    {
        $this->assertEquals('', $this->object->getDeleteAction());
    }

    /**
     * @test
     */
    public function testSetExportAction()
    {
        $this->assertEquals('testFunction', $this->object->setExportAction('testFunction')->getExportAction());
    }

    /**
     * @test
     */
    public function testGetExportAction()
    {
        $this->assertEquals('', $this->object->getExportAction());
    }

}

?>