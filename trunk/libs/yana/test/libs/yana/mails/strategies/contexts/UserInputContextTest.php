<?php

namespace Yana\Mails\Strategies\Contexts;

require_once dirname(__FILE__) . '/../../../../../../mails/strategies/contexts/userinputcontext.php';

/**
 * Test class for UserInputContext.
 * Generated by PHPUnit on 2012-08-27 at 22:45:46.
 */
class UserInputContextTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Yana\Mails\Strategies\Contexts\UserInputContext
     */
    protected $object;

    /**
     * @var \Yana\Mails\Strategies\NullStrategy
     */
    protected $strategy;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->strategy = new \Yana\Mails\Strategies\NullStrategy();
        $this->object = new \Yana\Mails\Strategies\Contexts\UserInputContext($this->strategy);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @test
     */
    public function testInvoke()
    {
        $message = new \Yana\Mails\Messages\Message();
        $message->setSubject('Subject')
            ->setRecipient('Address@domain.tld')
            ->setText('Some Text')
            ->getHeaders()->setHighPriority();
        $this->object->__invoke($message);

        $expectedArguments = array($message->getRecipient(), $message->getSubject(), $message->getText());
        $mails = $this->strategy->getMails();
        $actualArguments = array_pop($mails);
        $actualHeaders = array_pop($actualArguments); // drop headers
        $this->assertEquals($expectedArguments, $actualArguments);
        $this->assertEquals($message->getHeaders()->offsetGet('importance'), $actualHeaders['importance']);
    }

    /**
     * @test
     * @expectedException \Yana\Core\Exceptions\Mails\InvalidMailException
     */
    public function testInvokeInvalidMailException()
    {
        $message = new \Yana\Mails\Messages\Message();
        $message->setSubject('Valid subject')
            ->setRecipient('invalid mail')
            ->setText('Valid text');
        $this->object->__invoke($message);
    }

    /**
     * @test
     * @expectedException \Yana\Core\Exceptions\Mails\MissingSubjectException
     */
    public function testInvokeMissingSubjectException()
    {
        $message = new \Yana\Mails\Messages\Message();
        $message->setSubject("\n\r\f")
            ->setRecipient('valid@mail.tld')
            ->setText('Valid text');
        $this->object->__invoke($message);
    }

    /**
     * @test
     * @expectedException \Yana\Core\Exceptions\Mails\MissingTextException
     */
    public function testInvokeMissingTextException()
    {
        $message = new \Yana\Mails\Messages\Message();
        $message->setSubject('Valid subject')
            ->setRecipient('valid@mail.tld')
            ->setText('');
        $this->object->__invoke($message);
    }

    /**
     * @test
     */
    public function testInvokeHtml()
    {
        $message = new \Yana\Mails\Messages\Message();
        $message->setSubject('Valid subject')
            ->setRecipient('valid@mail.tld')
            ->setText('<b>Good Tag</b><script>Bad Tag</script>@')
            ->getHeaders()->setAsHtml();
        $this->object->__invoke($message);

        $expectedArgument = '<b>Good Tag</b>Bad Tag[at]';
        $mails = $this->strategy->getMails();
        $actualArguments = array_pop($mails);
        $this->assertEquals($expectedArgument, $actualArguments[2]);
    }

}

?>
