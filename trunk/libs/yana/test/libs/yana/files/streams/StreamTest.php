<?php

namespace Yana\Files\Streams;

require_once dirname(__FILE__) . '/../../../../../files/streams/stream.php';

/**
 * Test class for Stream.
 * Generated by PHPUnit on 2012-09-01 at 20:18:52.
 */
class StreamTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Stream
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Stream();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        if ($this->object->isRegistered('null')) {
            $this->object->unregisterWrapper('null');
        }
    }

    /**
     * @test
     */
    public function testRegisterWrapper()
    {
        $this->object->registerWrapper('null');
        $this->assertEquals("", \file_get_contents('null://path/file.ext'));
    }

    /**
     * @test
     */
    public function testGetWrappers()
    {
        $list = $this->object->getWrappers();
        $this->assertInternalType('array', $list);
    }

    /**
     * @test
     */
    public function testIsRegistered()
    {
        $this->assertFalse($this->object->isRegistered('null'));
        $this->object->registerWrapper('null');
        $this->assertTrue($this->object->isRegistered('null'));
    }

    /**
     * @test
     */
    public function testRestoreWrapper()
    {
        $this->object->unregisterWrapper('file');
        $this->object->registerWrapper('file', 'null');
        $this->assertTrue($this->object->restoreWrapper('file'));
        $this->assertTrue($this->object->isRegistered('file'));
    }

    /**
     * @test
     */
    public function testUnregisterWrapper()
    {
        $this->object->registerWrapper('null');
        $this->assertTrue($this->object->isRegistered('null'));
        $this->object->unregisterWrapper('null');
        $this->assertFalse($this->object->isRegistered('null'));
    }

}

?>
