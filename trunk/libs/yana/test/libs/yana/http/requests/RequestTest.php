<?php

namespace Yana\Http\Requests;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-18 at 16:41:00.
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Yana\Http\Requests\Container
     */
    protected $container;

    /**
     * @var \Yana\Http\Requests\Request
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = new \Yana\Http\Requests\Container();
        $this->request = new \Yana\Http\Requests\Request($this->container);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @test
     */
    public function testGet()
    {
        $this->assertEquals(new \Yana\Http\Requests\ValueWrapper(), $this->request->get());
        $this->container->setGet(new \Yana\Http\Requests\ValueWrapper(array('get' => '123')));
        $this->assertEquals($this->container->getGet(), $this->request->get());
    }

    /**
     * @test
     */
    public function testPost()
    {
        $this->assertEquals(new \Yana\Http\Requests\ValueWrapper(), $this->request->post());
        $this->container->setPost(new \Yana\Http\Requests\ValueWrapper(array('post' => '123')));
        $this->assertEquals($this->container->getPost(), $this->request->post());
    }

    /**
     * @test
     */
    public function testCookie()
    {
        $this->assertEquals(new \Yana\Http\Requests\ValueWrapper(), $this->request->cookie());
        $this->container->setPost(new \Yana\Http\Requests\ValueWrapper(array('cookie' => '123')));
        $this->assertEquals($this->container->getCookie(), $this->request->cookie());
    }

    /**
     * @test
     */
    public function testRequest()
    {
        $this->assertEquals(new \Yana\Http\Requests\ValueWrapper(), $this->request->request());
        $this->container->setRequest(new \Yana\Http\Requests\ValueWrapper(array('request' => '123')));
        $this->assertEquals($this->container->getRequest(), $this->request->request());
    }

    /**
     * @test
     */
    public function testIsPostRequest()
    {
        $this->assertFalse($this->request->method()->isPost());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::POST));
        $this->assertTrue($this->request->method()->isPost());
    }

    /**
     * @test
     */
    public function testIsGetRequest()
    {
        $this->assertFalse($this->request->method()->isGet());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::GET));
        $this->assertTrue($this->request->method()->isGet());
    }

    /**
     * @test
     */
    public function testIsPutRequest()
    {
        $this->assertFalse($this->request->method()->isPut());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::PUT));
        $this->assertTrue($this->request->method()->isPut());
    }

    /**
     * @test
     */
    public function testIsDeleteRequest()
    {
        $this->assertFalse($this->request->method()->isDelete());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::DELETE));
        $this->assertTrue($this->request->method()->isDelete());
    }

    /**
     * @test
     */
    public function testIsCommandLineRequest()
    {
        $this->assertFalse($this->request->method()->isCommandLine());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::CLI));
        $this->assertTrue($this->request->method()->isCommandLine());
    }

    /**
     * @test
     */
    public function testIsAjaxRequest()
    {
        $this->assertFalse($this->request->isAjaxRequest());
        $this->container->setGet(new \Yana\Http\Requests\ValueWrapper(array('is_ajax_request' => '1')));
        $this->assertTrue($this->request->isAjaxRequest());
    }

    /**
     * @test
     */
    public function testAllHttp()
    {
        $this->assertEquals(new \Yana\Http\Requests\ValueWrapper(), $this->request->all());
        $this->container
            ->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::CLI))
            ->setGet(new \Yana\Http\Requests\ValueWrapper(array(1 => 'a', 2 => 'b', 3 => 'c')))
            ->setPost(new \Yana\Http\Requests\ValueWrapper(array(4 => 'd', 2 => 'e', 5 => 'f')))
            ->setArguments(new \Yana\Http\Requests\ValueWrapper(array(6 => 'g', 2 => 'h', 7 => 'i')));
        $this->assertEquals($this->container->getArguments(), $this->request->all());
        $this->assertEquals($this->request->args(), $this->request->all());
        $this->assertEquals(array(6 => 'g', 2 => 'h', 7 => 'i'), $this->request->all()->asUnsafeArray());
        $this->container->setMethod(new \Yana\Http\Requests\Method(\Yana\Http\Requests\MethodEnumeration::POST));
        $this->assertEquals(array(1 => 'a', 2 => 'e', 3 => 'c', 4 => 'd', 5 => 'f'), $this->request->all()->asUnsafeArray());
    }

}
