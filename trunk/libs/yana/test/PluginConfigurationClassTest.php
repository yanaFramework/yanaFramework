<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../pluginconfigurationclass.class.php';

/**
 * Test class for PluginConfigurationClass.
 * Generated by PHPUnit on 2011-03-05 at 19:53:34.
 */
class PluginConfigurationClassTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PluginConfigurationClass
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PluginConfigurationClass;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @test
     */
    public function testSetClassName()
    {
        $this->object->setClassName('ClassName');
        $this->assertEquals('ClassName', $this->object->getClassName());
    }

    /**
     * @test
     */
    public function testSetDirectory()
    {
        $this->object->setDirectory(dirname(__FILE__));
        $this->assertEquals(dirname(__FILE__), $this->object->getDirectory());
    }

    /**
     * @test
     */
    public function testSetTitles()
    {
        $titles = array(
            'a' => 'Ä',
            'a-b' => 'Ae'
        );
        $this->object->setDefaultTitle('test Ä')
            ->setTitles($titles);
        $this->assertEquals('test Ä', $this->object->getTitle());
        $this->assertEquals('Ä', $this->object->getTitle('a'));
        $this->assertEquals('Ae', $this->object->getTitle('a', 'b'));
        $this->assertEquals('Ä', $this->object->getTitle('a', 'c'));
        $this->assertEquals('test Ä', $this->object->getTitle('b'));
    }

    /**
     * @test
     */
    public function testSetDefaultTitle()
    {
        $this->object->setDefaultTitle('test Ä');
        $this->assertEquals('test Ä', $this->object->getTitle());
    }

    /**
     * @test
     */
    public function testSetTexts()
    {
        $texts = array(
            'a' => 'Ä',
            'a-b' => 'Ae'
        );
        $this->object->setDefaultText('test Ä')
            ->setTexts($texts);
        $this->assertEquals('test Ä', $this->object->getText());
        $this->assertEquals('Ä', $this->object->getText('a'));
        $this->assertEquals('Ae', $this->object->getText('a', 'b'));
        $this->assertEquals('Ä', $this->object->getText('a', 'c'));
        $this->assertEquals('test Ä', $this->object->getText('b'));
    }

    /**
     * @test
     */
    public function testSetDefaultText()
    {
        $this->object->setDefaultText('test Ä');
        $this->assertEquals('test Ä', $this->object->getText());
    }

    /**
     * @test
     */
    public function testSetType()
    {
        $this->object->setType('Library');
        $this->assertEquals('library', $this->object->getType());
    }

    /**
     * @test
     * @expectedException  InvalidArgumentException
     */
    public function testSetTypeInvalidArgumentException()
    {
        $this->object->setType('Invalid type');
    }

    /**
     * @test
     */
    public function testSetAuthors()
    {
        $this->object->setAuthors(array('Ä', 'b'));
        $this->assertEquals(array('Ä', 'b'), $this->object->getAuthors());
        $this->assertEquals('Ä, b', $this->object->getAuthor());
    }

    /**
     * @test
     */
    public function testSetPriority()
    {
        $max = PluginPriorityEnumeration::HIGHEST;
        $min = PluginPriorityEnumeration::LOWEST;
        $default = PluginPriorityEnumeration::NORMAL;
        $this->assertEquals($default, $this->object->getPriority());
        $this->assertEquals($min, $this->object->setPriority($min - 1)->getPriority());
        $this->assertEquals($max, $this->object->setPriority($max + 1)->getPriority());
        $this->assertEquals($default, $this->object->setPriority($default)->getPriority());
        $this->assertEquals(PluginPriorityEnumeration::HIGH, $this->object->setPriority('high')->getPriority());
    }

    /**
     * @test
     */
    public function testSetGroup()
    {
        $this->object->setGroup('Test Ä');
        $this->assertEquals('Test Ä', $this->object->getGroup());
    }

    /**
     * @test
     */
    public function testSetParent()
    {
        $this->object->setParent('ClassName');
        $this->assertEquals('ClassName', $this->object->getParent());
    }

    /**
     * @todo Implement testSetDependencies().
     */
    public function testSetDependencies()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLicense().
     */
    public function testSetLicense()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetUrl().
     */
    public function testSetUrl()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetVersion().
     */
    public function testSetVersion()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLastModified().
     */
    public function testSetLastModified()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetMenus().
     */
    public function testSetMenus()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetActive().
     */
    public function testSetActive()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLastModified().
     */
    public function testGetLastModified()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @test
     */
    public function testGetTitle()
    {
        $this->assertEquals('', $this->object->getTitle());
    }

    /**
     * @test
     */
    public function testGetText()
    {
        $this->assertEquals('', $this->object->getText());
    }

    /**
     * @test
     */
    public function testGetType()
    {
        $this->assertEquals('default', $this->object->getType());
    }

    /**
     * @test
     */
    public function testGetAuthor()
    {
        $this->assertEquals('', $this->object->getAuthor());
    }

    /**
     * @test
     */
    public function testGetAuthors()
    {
        $this->assertEquals(array(), $this->object->getAuthors());
    }

    /**
     * @test
     */
    public function testGetPriority()
    {
        $this->assertEquals(PluginPriorityEnumeration::NORMAL, $this->object->getPriority());
    }

    /**
     * @test
     */
    public function testGetGroup()
    {
        $this->assertEquals('', $this->object->getGroup());
    }

    /**
     * @test
     */
    public function testGetParent()
    {
        $this->assertEquals('', $this->object->getParent());
    }

    /**
     * @test
     */
    public function testGetDependencies()
    {
        $this->assertEquals(array(), $this->object->getDependencies());
    }

    /**
     * @test
     */
    public function testGetVersion()
    {
        $this->assertEquals('', $this->object->getVersion());
    }

    /**
     * @test
     */
    public function testGetUrl()
    {
        $this->assertEquals('', $this->object->getUrl());
    }

    /**
     * @test
     */
    public function testGetLicense()
    {
        $this->assertEquals('', $this->object->getLicense());
    }

    /**
     * @test
     */
    public function testGetMenuNames()
    {
        $this->assertEquals(array(), $this->object->getMenuNames());
    }

    /**
     * @test
     */
    public function testGetMenuEntries()
    {
        $this->assertEquals(array(), $this->object->getMenuEntries());
    }

    /**
     * @test
     */
    public function testGetDirectory()
    {
        $this->assertEquals('', $this->object->getDirectory());
    }

    /**
     * @test
     */
    public function testGetActive()
    {
        $this->assertEquals(PluginActivityEnumeration::INACTIVE, $this->object->getActive());
    }

    /**
     * @test
     */
    public function testGetPreviewImage()
    {
        $this->assertEquals('/preview.png', $this->object->getPreviewImage());
        $this->object->setDirectory('Ä/b');
        $this->assertEquals('Ä/b/preview.png', $this->object->getPreviewImage());
    }

    /**
     * @test
     */
    public function testGetIcon()
    {
        $this->assertEquals('/icon.png', $this->object->getIcon());
        $this->object->setDirectory('Ä/b');
        $this->assertEquals('Ä/b/icon.png', $this->object->getIcon());
    }

    /**
     * @test
     */
    public function testGetClassName()
    {
        $this->assertEquals('', $this->object->getClassName());
    }

    /**
     * @todo Implement testGetMethod().
     */
    public function testGetMethod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetMethods().
     */
    public function testGetMethods()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddMethod().
     */
    public function testAddMethod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}

?>