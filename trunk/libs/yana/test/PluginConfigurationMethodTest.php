<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../pluginconfigurationmethod.class.php';

/**
 * Test class for PluginConfigurationMethod.
 * Generated by PHPUnit on 2011-03-05 at 19:53:29.
 */
class PluginConfigurationMethodTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PluginConfigurationMethod
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PluginConfigurationMethod();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @test
     */
    public function testType()
    {
        $this->assertEquals(PluginTypeEnumeration::DEFAULT_SETTING, $this->object->getType());
        $this->object->setType('invalid');
        $this->assertEquals(PluginTypeEnumeration::DEFAULT_SETTING, $this->object->getType());
        $this->object->setType(PluginTypeEnumeration::LIBRARY);
        $this->assertEquals(PluginTypeEnumeration::LIBRARY, $this->object->getType());
    }

    /**
     * @test
     */
    public function testPath()
    {
        $this->assertEquals('', $this->object->getPath());
        $this->assertEquals(array(), $this->object->getPaths());
        $this->object->addPath('path1');
        $this->object->addPath('path2');
        $this->assertEquals('path1', $this->object->getPath());
        $this->assertEquals(array('path1', 'path2'), $this->object->getPaths());
    }

    /**
     * @todo Implement testAddSubscription().
     */
    public function testAddSubscription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @test
     */
    public function testScripts()
    {
        $this->assertEquals(array(), $this->object->getScripts());
        $this->object->setScripts(array('script1.js', 'script2.js'));
        $this->assertEquals(array('script1.js', 'script2.js'), $this->object->getScripts());
    }

    /**
     * @test
     */
    public function testStyles()
    {
        $this->assertEquals(array(), $this->object->getStyles());
        $this->object->setStyles(array('style1.css', 'style2.css'));
        $this->assertEquals(array('style1.css', 'style2.css'), $this->object->getStyles());
    }

    /**
     * @test
     */
    public function testLanguages()
    {
        $this->assertEquals(array(), $this->object->getLanguages());
        $this->object->setLanguages(array('language1', 'language2'));
        $this->assertEquals(array('language1', 'language2'), $this->object->getLanguages());
    }

    /**
     * @test
     */
    public function testGetParams()
    {
        $this->assertEquals(array(), $this->object->getParams());
    }

    /**
     * @test
     */
    public function testSetParams()
    {
        $params = array('p1' => 'int', 'p2' => 'string');
        $this->object->setParams($params);
        $this->assertEquals($params, $this->object->getParams());
    }

    /**
     * @test
     */
    public function testReturn()
    {
        $this->assertEquals('', $this->object->getReturn());
        $this->object->setReturn('String');
        $this->assertEquals('String', $this->object->getReturn());
    }

    /**
     * @test
     */
    public function testGroup()
    {
        $this->assertEquals('', $this->object->getGroup());
        $this->object->setGroup('group');
        $this->assertEquals('group', $this->object->getGroup());
    }

    /**
     * @test
     */
    public function testGetMenu()
    {
        $this->assertEquals(null, $this->object->getMenu());
    }

    /**
     * @todo Implement testSetMenu().
     */
    public function testSetMenu()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @test
     */
    public function testGetOnSuccess()
    {
        $this->assertNull($this->object->getOnSuccess());
    }

    /**
     * @test
     */
    public function testSetOnSuccess()
    {
        $expected = new PluginEventRoute();
        $expected->setMessage('message');
        $expected->setTarget('target');
        $this->object->setOnSuccess($expected);
        $this->assertEquals($expected, $this->object->getOnSuccess());
        $this->assertEquals(PluginEventRoute::CODE_SUCCESS, $expected->getCode());
    }

    /**
     * @test
     */
    public function testGetOnError()
    {
        $this->assertNull($this->object->getOnError());
    }

    /**
     * @test
     */
    public function testSetOnError()
    {
        $expected = new PluginEventRoute();
        $expected->setMessage('message');
        $expected->setTarget('target');
        $this->object->setOnError($expected);
        $this->assertEquals($expected, $this->object->getOnError());
        $this->assertEquals(PluginEventRoute::CODE_ERROR, $expected->getCode());
    }

    /**
     * @test
     */
    public function testGetTitle()
    {
        $this->assertEquals('', $this->object->getTitle());
    }

    /**
     * @todo Implement testSetTitle().
     */
    public function testSetTitle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @test
     */
    public function testGetSafeMode()
    {
        $this->assertNull($this->object->getSafeMode());
    }

    /**
     * @test
     */
    public function testSetSafeMode()
    {
        $this->object->setSafeMode(true);
        $this->assertTrue($this->object->getSafeMode());
        $this->object->setSafeMode(false);
        $this->assertFalse($this->object->getSafeMode());
        $this->object->setSafeMode('yes');
        $this->assertTrue($this->object->getSafeMode());
        $this->object->setSafeMode('no');
        $this->assertFalse($this->object->getSafeMode());
        $this->object->setSafeMode(null);
        $this->assertNull($this->object->getSafeMode());
    }

    /**
     * @test
     */
    public function testGetTemplate()
    {
        $this->assertEquals('', $this->object->getTemplate());
    }

    /**
     * @test
     */
    public function testSetTemplate()
    {
        $this->object->setTemplate('test');
        $this->assertEquals('test', $this->object->getTemplate());
    }

    /**
     * @test
     */
    public function testGetUserLevels()
    {
        $this->assertEquals(array(), $this->object->getUserLevels());
    }

    /**
     * @test
     */
    public function testSetUserLevels()
    {
        $levelA = new PluginUserLevel();
        $levelB = new PluginUserLevel();
        $levelA->setGroup('A')->setLevel(75);
        $levelB->setRole('B')->setLevel(50);
        $users = array($levelA, $levelB);
        $this->object->setUserLevels($users);
        $this->assertEquals($users, $this->object->getUserLevels());
    }

    /**
     * @test
     */
    public function testGetOverwrite()
    {
        $this->assertFalse($this->object->getOverwrite());
    }

    /**
     * @test
     */
    public function testSetOverwrite()
    {
        $this->object->setOverwrite(true);
        $this->assertTrue($this->object->getOverwrite());
    }

    /**
     * @test
     */
    public function testGetSubscribe()
    {
        $this->assertFalse($this->object->getSubscribe());
    }

    /**
     * @test
     */
    public function testSetSubscribe()
    {
        $this->object->setSubscribe(true);
        $this->assertTrue($this->object->getSubscribe());
    }

    /**
     * @test
     */
    public function testGetClassName()
    {
        $this->assertEquals('', $this->object->getClassName());
    }

    /**
     * @test
     */
    public function testSetClassName()
    {
        $this->object->setClassName(__CLASS__);
        $this->assertEquals(__CLASS__, $this->object->getClassName());
    }

    /**
     * @test
     */
    public function testGetMethodName()
    {
        $this->assertEquals('', $this->object->getMethodName());
    }

    /**
     * @test
     */
    public function testSetMethodName()
    {
        $this->object->setMethodName(__METHOD__);
        $this->assertEquals(__METHOD__, $this->object->getMethodName());
    }

    /**
     * @todo Implement testSetEventArguments().
     */
    public function testSetEventArguments()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @test
     */
    public function testGetDefaults()
    {
        $this->assertEquals(array(), $this->object->getDefaults());
    }

    /**
     * @test
     */
    public function testSetDefaults()
    {
        $defaults = array(2 => 1, 3 => '2', 4=> 3);
        $this->object->setDefaults($defaults);
        $this->assertEquals($defaults, $this->object->getDefaults());
    }

    /**
     * @test
     */
    public function testSetHasGenericParams()
    {
        $this->assertFalse($this->object->hasGenericParams());
        $this->object->setHasGenericParams(true);
        $this->assertTrue($this->object->hasGenericParams());
    }

    /**
     * @todo Implement testSendEvent().
     */
    public function testSendEvent()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHasMethod().
     */
    public function testHasMethod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}

?>