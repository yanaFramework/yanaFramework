<?php{$plugin}

/**
 * <<plugin>> Class "{$plugin->getClassName()}"
 *
 * @package     yana
 * @subpackage  plugins
 */
class {$plugin->getClassName()} extends StdClass implements IsPlugin
{ldelim}

{if $schema}
    /**
     * Connection to data source (API)
     *
     * @access  private
     * @static
     * @var     DBStream  Database-API with Query-Builder (also works with text-files)
     */
    private static $database = null;

    /**
     * Return database connection.
     *
     * @access  protected
     * @static
     * @return  DBStream
     * @ignore
     */
    protected static function getDatabase()
    {ldelim}
        if (!isset(self::$database)) {ldelim}
            self::$database = Yana::connect("{$schema->getName()}");
        {rdelim}
        return self::$database;
    {rdelim}

    /**
     * Download a file.
     *
     * This function will automatically determine the requested resource. It will
     * check whether it is of type "image" or "file" and handle the request
     * accordingly. This means it will be sending appropriate headers,
     * retrieving and outputting the contents of the resource and terminating
     * the program.
     *
     * @access  protected
     * @static
     */
    protected static function downloadFile()
    {ldelim}
        $source = DbBlob::getFileId();
        if ($source === false) {ldelim}
            exit("Error: invalid resource.");
        {rdelim}
        $dir = preg_quote(DbBlob::getDbBlobDir(), '/');
        // downloading a file
        if (preg_match('/^' . $dir . 'file\.\w+\.gz$/', $source)) {ldelim}

            $dbBlob = new DbBlob($source);
            $dbBlob->read();
            header('Content-Disposition: attachment; filename=' . $dbBlob->getPath());
            header('Content-Length: ' . $dbBlob->getFilesize());
            header('Content-type: ' . $dbBlob->getMimeType());
            print $dbBlob->getContent();

        // downloading an image
        {rdelim} elseif (preg_match('/^' . $dir . '(image|thumb)\.\w+\.png$/', $source)) {ldelim}
            $image = new Image($source);
            $image->outputToScreen();
        {rdelim} else {ldelim}
            print "Error: invalid resource.";
        {rdelim}
        exit;
    {rdelim}

{foreach item="form" from=$schema->getForms()}
{if $form->getSchemaName() == $schema->getName()}
    /**
     * Get form definition.
     *
     * @access  protected
     * @static
     * @return  FormFacade
     */
    protected static function get{$form->getName()|capitalize}Form()
    {ldelim}
        $builder = new FormBuilder('{$schema->getName()}');
        $builder->setId('{$form->getName()}');
        return $builder();
    {rdelim}
{/if}

{/foreach}
{/if}
    /**
     * Default event handler.
     *
     * The default event handler catches all events, whatever they might be.
     * If you don't need it, you may deactive it by adding an @ignore to the annotations below.
     *
     * @access  public
     * @param   string  $event  name of the called event in lower-case
     * @param   array   $ARGS   array of arguments passed to the function
     * @return  bool
     * @ignore
     */
    public function catchAll($event, array $ARGS)
    {ldelim}
        // @todo add your code here
        return true;
    {rdelim}

    /* NOTE:
     * All member-functions stated here act as action handlers (event handlers) and may be called
     * directly in a browser by typing: index.php?action=function_name
     *
     * You may exclude a single function from this behaviour by either making it non-public, or by
     * adding @ignore to the function description.
     */

{foreach item="method" from=$plugin->getMethods()}{if !$method->isAutoGenerated()}

{$method}
    {ldelim}
        // @todo add your code here
        return true;
    {rdelim}

{/if}{/foreach}

{if $schema}
{foreach item="form" from=$schema->getForms()}
{if $form->getSchemaName() == $schema->getName()}
    /**
     * Provide edit-form.
     *
     * @type      read
     * @user      group: {$plugin->getId()}
     * @user      group: admin, level: 1
     * @menu      group: start
     * @title     {$form->getName()}
     * @template  templates/{$form->getName()}.html.tpl
     * @language  {$plugin->getId()}
     * @access    public
     */
    public function {$plugin->getId()}{ucfirst($form->getName())}()
    {ldelim}
        // @todo add your code here
    {rdelim}

{if $form->getEvent('search')}
    /**
     * Process search query.
     *
     * @type      read
     * @user      group: {$plugin->getId()}
     * @user      group: admin, level: 1
     * @template  templates/{$form->getName()}.html.tpl
     * @language  {$plugin->getId()}
     * @access    public
     */
    public function {$form->getEvent('search')->getAction()}()
    {ldelim}
        // @todo add your code here
    {rdelim}

{/if}
{if $form->getEvent('update')}
    /**
     * Save changes made in edit-form.
     *
     * @type       write
     * @user       group: {$plugin->getId()}, role: moderator
     * @user       group: admin, level: 75
     * @template   MESSAGE
     * @language   {$plugin->getId()}
     * @onsuccess  goto: {$plugin->getId()}{$form->getName()}
     * @onerror    goto: {$plugin->getId()}{$form->getName()}
     * @access     public
     * @return     bool
     */
    public function {$form->getEvent('update')->getAction()}()
    {ldelim}
        $form = self::get{$form->getName()|capitalize}Form();
        $worker = new FormWorker(self::getDatabase(), $form);
        return $worker->update();
    {rdelim}

{/if}
{if $form->getEvent('delete')}
    /**
     * Delete an entry.
     *
     * Returns bool(true) on success and bool(false) on error.
     *
     * @type       write
     * @user       group: {$plugin->getId()}, role: moderator
     * @user       group: admin, level: 75
     * @template   MESSAGE
     * @language   {$plugin->getId()}
     * @onsuccess  goto: {$plugin->getId()}{$form->getName()}
     * @onerror    goto: {$plugin->getId()}{$form->getName()}
     * @access     public
     * @param      array  $selected_entries  array of entries to delete
     * @return     bool
     */
    public function {$form->getEvent('delete')->getAction()}(array $selected_entries)
    {ldelim}
        $form = self::get{$form->getName()|capitalize}Form();
        $worker = new FormWorker(self::getDatabase(), $form);
        return $worker->delete($selected_entries);
    {rdelim}

{/if}
{if $form->getEvent('insert')}
    /**
     * Write new entry to database.
     *
     * Returns bool(true) on success and bool(false) on error.
     *
     * @type       write
     * @user       group: {$plugin->getId()}, role: moderator
     * @user       group: admin, level: 30
     * @template   MESSAGE
     * @language   {$plugin->getId()}
     * @onsuccess  goto: {$plugin->getId()}{$form->getName()}
     * @onerror    goto: {$plugin->getId()}{$form->getName()}
     * @access     public
     * @return     bool
     */
    public function {$form->getEvent('insert')->getAction()}()
    {ldelim}
        $form = self::get{$form->getName()|capitalize}Form();
        $worker = new FormWorker(self::getDatabase(), $form);
        return $worker->create();
    {rdelim}

{/if}
{if $form->getEvent('export')}
    /**
     * Export entry from database.
     *
     * Returns bool(true) on success and bool(false) on error.
     *
     * @type       read
     * @user       group: {$plugin->getId()}, role: moderator
     * @user       group: admin, level: 75
     * @template   NULL
     * @access     public
     * @return     string
     */
    public function {$form->getEvent('export')->getAction()}()
    {ldelim}
        $form = self::get{$form->getName()|capitalize}Form();
        $worker = new FormWorker(self::getDatabase(), $form);
        return $worker->export();
    {rdelim}

{/if}
{if $form->getEvent('download') && $form->getEvent('download')->getAction() != 'download_file'}
    /**
     * Download action.
     *
     * {ldelim}@internal
     * If you need to restrict access to images or files in the database,
     * please add appropriate security tests to this function.
     * {rdelim}{rdelim}
     *
     * @type    read
     * @user    group: {$plugin->getId()}
     * @user    group: admin, level: 100
     * @access  public
     */
    public function {$form->getEvent('download')->getAction()}()
    {ldelim}
        self::downloadFile();
    {rdelim}
{/if}
{/if}
{/foreach}
{/if}

{rdelim}
?>
